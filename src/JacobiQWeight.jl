import ApproxFunBase: weight, dimension

export JacobiQWeight

"""
`JacobiQWeight`
weights a basis on `‚ÑÇ\\ùïÄ` weighted by `(z+1)^Œ±*(z-1)^Œ≤`.
Note the inconsistency of the parameters with `JacobiQ`.
When the domain is `[a,b]` the weight is inferred by mapping to `[-1,1]`
"""
struct JacobiQWeight{S,DD} <: WeightSpace{S,DD,Float64}
    Œ±::Float64
    Œ≤::Float64
    space::S
    function JacobiQWeight{S,DD}(Œ±::Float64,Œ≤::Float64,space::S) where {S,DD}
        if isa(space,JacobiQWeight)
            JacobiQWeight(Œ±+space.Œ±,Œ≤+space.Œ≤,space.space)
        else
            new{S,DD}(Œ±,Œ≤,space)
        end
    end
end

JacobiQWeight(a::Number,b::Number,d::RealUnivariateSpace) =
    JacobiQWeight{typeof(d),typeof(domain(d))}(Float64(a),Float64(b),d)
JacobiQWeight(a::Number,b::Number,d::IntervalOrSegmentDomain) =
    JacobiQWeight(Float64(a),Float64(b),Space(d))
JacobiQWeight(a::Number,b::Number,d::Vector) =
    JacobiQWeight(Float64(a),Float64(b),Space(d))
JacobiQWeight(a::Number,b::Number) = JacobiQWeight(a,b,Chebyshev())

JacobiQWeight(a::Number,b::Number,s::PiecewiseSpace) = PiecewiseSpace(JacobiQWeight(a,b,vec(s)))


spacescompatible(A::JacobiQWeight,B::JacobiQWeight) =
    A.Œ±==B.Œ± && A.Œ≤ == B.Œ≤ && spacescompatible(A.space,B.space)

transformtimes(f::Fun{JW1},g::Fun{JW2}) where {JW1<:JacobiQWeight,JW2<:JacobiQWeight}=
            Fun(JacobiQWeight(f.space.Œ±+g.space.Œ±,f.space.Œ≤+g.space.Œ≤,f.space.space),
                coefficients(transformtimes(Fun(f.space.space,f.coefficients),
                                            Fun(g.space.space,g.coefficients))))
transformtimes(f::Fun{JW},g::Fun) where {JW<:JacobiQWeight} = Fun(f.space,coefficients(transformtimes(Fun(f.space.space,f.coefficients),g)))
transformtimes(f::Fun,g::Fun{JW}) where {JW<:JacobiQWeight} = Fun(g.space,coefficients(transformtimes(Fun(g.space.space,g.coefficients),f)))

##  Œ± and Œ≤ are opposite the convention for JacobiQ polynomials
# Here, Œ± is the left algebraic singularity and Œ≤ is the right algebraic singularity.


jacobiQweight(Œ±,Œ≤,x) = (x+1)^Œ±*(x-1)^Œ≤
jacobiQweight(Œ±,Œ≤,d::Domain) = Fun(JacobiQWeight(Œ±,Œ≤,ConstantSpace(d)),[1.])
jacobiQweight(Œ±,Œ≤) = jacobiQweight(Œ±,Œ≤,ChebyshevInterval())

weight(sp::JacobiQWeight,x) = jacobiQweight(sp.Œ±,sp.Œ≤,tocanonical(sp.space.domain,x))
dimension(sp::JacobiQWeight) = dimension(sp.space)


Base.first(f::Fun{JW}) where {JW<:JacobiQWeight} =
    space(f).Œ± > 0 ? zero(cfstype(f)) : f(first(domain(f)))
Base.last(f::Fun{JW}) where {JW<:JacobiQWeight} =
    space(f).Œ≤ > 0 ? zero(cfstype(f)) : f(last(domain(f)))

setdomain(sp::JacobiQWeight,d::Domain) = JacobiQWeight(sp.Œ±,sp.Œ≤,setdomain(sp.space,d))
